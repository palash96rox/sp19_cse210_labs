# python=3.6

1.
def find_sum(n,sum=0):
  if n==0: return sum
  return find_sum(n//10,sum+(n%10))

n = int(input("Enter number: "))
print("sum of digits:",find_sum(n))


2.
def binary_reverse(n,binary=''):
  if n==0: return binary
  return binary_reverse(n//2,binary+str(n%2))

def find_binary(n):
  binary = binary_reverse(n)
  return '0b'+binary[::-1]

def exp(n,e):
  if e==0: return 1
  h = exp(n,e//2)
  if e%2==0: return h*h
  return h*h*n

n = int(input("Enter number: "))
e = int(input("Enter exponent: "))
print(n,"in binary:",find_binary(n))
print(n,"**",e,"=",exp(n,e))


3.
# Binary search for ascending order
# Requires: array, integer to find, start index, end index
def binary_search(arr,x,l,r):
  if l>r: return -1
  m = (l+r)//2
  if arr[m]>x: return binary_search(arr,x,0,m-1)
  elif arr[m]<x: return binary_search(arr,x,m+1,r)
  return m

n = int(input("Enter num of elements: "))
arr = []
print("Enter elements")
for _ in range(n): arr.append(int(input()))
print("Entered array:",arr)
arr = sorted(arr)
print("Sorted array:",arr)
x = int(input("Enter number to search: "))
print(x,'at position',binary_search(arr,x,0,n))


4.
# Extended master's theorem: T(n) = aT(n/b)+O(n**k(logn)**i)
# chr(920) = Θ; chr(8712) = ∈; chr(8776) = ≈;
import math

# Source: https://www.nayuki.io/res/master-theorem-solver-javascript/master-theorem-solver.js
def get_complexity(k,i):
  string = ''
  # For n**k
  if type(k)==int:
    if k==0 and i!=0: string += ''
    elif k==0 and i==0: string += '1'
    else: string += '(n)' if k==1 else '(n**'+str(k)+')'
  else: string += '(n**'+str(k)+')'
  # For logn ** i
  if i:
    if string: string += '*'
    string += '(log(n))' if i==1 else '(log(n)**'+str(i)+')'
  return string

# Source: https://www.nayuki.io/res/master-theorem-solver-javascript/master-theorem-solver.js
def master(a,b,k,i):
  error = 'Error in input- '
  flag = False
  if a<1: 
    flag = True
    error+='a must be non negative; '
  if b<=1: 
    flag = True
    error+='b must be greater than 1; '
  if k<0: 
    flag = True
    error+='k must be non negative; '
  if i<0: 
    flag = True
    error+='i must be non negative; '
  if flag: return error,''
  # Recurrence relation
  reccurence = 'T(n):= ' 
  if a==0: reccurence += '0'
  else: reccurence += ('' if a==1 else str(a)+'*') + 'T(n' + ('' if b==1 else '/'+str(b)) + ')'
  reccurence += ' + ' + chr(920) + '[' + get_complexity(k,i) + ']'
  # Complexity
  solution = 'T ' + chr(8712) + ' ' + chr(920) + '('
  p = math.log(a)/math.log(b)
  if p==k: solution += get_complexity(k,i+1)
  elif p<k: solution += get_complexity(k,i)
  else:
    if round(p) == p: solution += get_complexity(round(p),0)
    else: 
      solution += get_complexity('log_'+str(b)+'('+str(a)+')',0)
      solution += ' ' + chr(8776) + ' ' + chr(920) + '(' + get_complexity(round(p,4),0)
  solution += ')'
  return reccurence,solution

a = float(input("enter a: "))
b = float(input("enter b: "))
k = float(input("enter k: "))
i = float(input("enter i: "))

reccurence,solution = master(a,b,k,i)

print('\n\nreccurence relation:',reccurence)
print('\nsolution:',solution)
print()

# Notes
Please make us submit codes so you may test